<버튼 클릭시 색깔 변하게 하기>

제이쿼리로 시작했을때의 문제점은 자바스크립트 방식을 모른다는 것이다
리액트 방식도 따로있음 근데 제이쿼리 방식만 아니까 내가 생각하는대로 하는게 힘든것
그러므로 자바스크립트 본래의 방식을 해볼거다
============================================
<원리>

자바스크립트 방식에서는 다음과 같이 작동시킨다
1. li에는 onClick={함수명}을 추가

2. 함수명(event){~} 이렇게 함수 정의부에 전달인자로 event를 넘겨준다
   (이때 onClick측에서 따로 파라미터 안넘겨줘도 event는 자동으로 들어오는것임)
   이렇게 한다음 console.log(event.target); 한다음 li 클릭해보면 해당 li정보가 뜸
   <li>~<li> 이런식으로 해당 li의 코드인데 실제 변수값이 대입된 상태로 콘솔창에 찍히게 된다

3. 그런다음 함수 정의부에서 event.target에 active라는 클래스를 추가시켜주는 내용을 정의
   이때 <li>태그 안에 속성들 값을 바꾸려면 그냥 event.target.className="active";이렇게 하면 된다

4. css파일에 가서는 ~ .active라는 클래스를 하나 만들고 거기에 바뀌길 원하는 색상을 집어넣는다
   그럼 클릭 할때마다 함수에 의해 event.target에 active클래스가 추가되고 이에 따라
   .active 클래스에 해당하는 css파일이 먹혀들어가겠지

=>이때 선택한 애 아닌 다른 애들은 색상 원래대로 돌려주는 작업이 필요한데
    이를 어떻게 할지는 스스로 생각해보도록 한다
==============================================
<실제>

onClick함수 하나로 모든것을 처리했다
핵심 코드는 다음과 같다
 ------------------------------------------------
    selectedColor(event){
       // console.log(event.target.className);
       if(this.state.selected!=" ")
       {
        this.state.selected.className="nonActive" 
        console.log(this.state.selected.className);
       } 
       event.target.className="active";
       // console.log(event.target.className);
        this.setState({selected : event.target});
    }
 ------------------------------------------------
여기서 특정 li를 클릭시 selectedColor함수가 불리며 event값 따로 보내주지 않아도 자동으로 넘어간것을 전달인자로 받아준다
이때 css에는 active클래스와 nonActive클래스의 css를 추가해 주었는데
특정 li 클릭시 그 li의 nonActive였던 className을 active로 바꿔주는 것이다
이렇게 클릭한 것의 className을 바꿈으로써 바뀐 이름의 css가 적용된다

이때 선택한것 외의 다른 것들은 색깔 진해졌던걸 해제해야하는데
이걸 위해 this.state={안에 selected:" ",를 맨 위에 추가했다
핵심코드 위에 써놓은 부분에서 일단 지금 클릭된것의 클래스를 active로 바꾼 후 
selected 변수에 지금 클릭됐던 li의 정보인 event.target을 저장해놓는다
이후 다른것이 눌렸을 경우 다음 순서로 수행한다
1. 예전에 눌렸었던 selected의 className을 nonActive로 변환
2. 방금 누른 event target의 className을 active로 변환
3. 방금 수행한 event target을 selected변수에 저장해 다음 클릭을 대비

이때 if(this.state.selected!=" ")를 통해 이전에 눌린것이 있을때만 그러한 작업을 수행하도록 했다
안그러면 맨 처음에 눌린 애의 경우 selected에 공백이 들어가있기 때문에 공백의 className을 바꿔야해서 에러뜨기 때문이다

추가 기술1. 실제로 className을 바꾸는 것은 단순하게 this.state.selected.className="nonActive"
또는 event.target.className="active"로 바꿀 수 있었으며

추가 기술 2. componentDidMount에서도 state값을 바꾸고 selectedColor에서도 state값을 바꾸는데
이 바뀐 값을 출력해주는것은 그냥 모두 다 componentDidUpdate에 때려박는다
그럼 알아서 바뀔때 출력해주므로 순서 섞일까봐 걱정할 필요 없음 
==============================================
<성공코드-jsx>

import React, { PureComponent } from 'react';
import "./BaseSelectProblem.css"
import axios from "axios"
class BaseSelectProblem extends PureComponent {
    constructor(){
        super();
        this.state={
            selected:" ",
            id0 : " ",
            name0 : " ",
            types0:" ",
            id1 : " ",
            name1 : " ",
            types1:" ",
            id2 : " ",
            name2 : " ",
            types2:" "
        }
        this.selectedColor=this.selectedColor.bind(this);   
    }
    selectedColor(event){
       // console.log(event.target.className);
       if(this.state.selected!=" ")
       {
        this.state.selected.className="nonActive" 
        console.log(this.state.selected.className);
       } 
       event.target.className="active";
       // console.log(event.target.className);
        this.setState({selected : event.target});
    }
    componentDidMount(){
        axios.get('https://api.banchango.shop/v1/warehouses')
        .then(response=>{
            console.log(response);
            this.setState({
                           id0 : response.data.warehouses[0].id,
                           name0 : response.data.warehouses[0].name,
                           types0 : response.data.warehouses[0].types,
                           id1 : response.data.warehouses[1].id,
                           name1 : response.data.warehouses[1].name,
                           types1 : response.data.warehouses[1].types,
                           id2 : response.data.warehouses[2].id,
                           name2 : response.data.warehouses[2].name,
                           types2 : response.data.warehouses[2].types,
                        });
        });
    }
    componentDidUpdate(){
        console.log(this.state.id1);
        console.log(this.state.selected);
    }

    render() {
        return (
            <div className= "BaseSelectProblem">
                 <ol id="baseList">
                     <li className="nonActive" onClick={this.selectedColor}>{this.state.name0} ( {this.state.types0} )</li>
                     <li className="nonActive" onClick={this.selectedColor}>{this.state.name1} ( {this.state.types1} )</li>
                     <li className="nonActive" onClick={this.selectedColor}>{this.state.name2} ( {this.state.types2} )</li>
                 </ol>
            </div>
        );
    }
}

export default BaseSelectProblem;
==============================================
<성공코드-css>

.BaseSelectProblem #baseList{
    position : absolute;
    margin-left : 35%;
    margin-top:-2%;
    font-size :20px;
    width : 50%;
}

.BaseSelectProblem #baseList li{
    background-color: rgba(166, 104, 248, 0.534);
    border-radius:5px;
    color:white;
    padding:2%;
    margin:2%;
}
.BaseSelectProblem #baseList li:hover{
    background-color: rgba(166, 104, 248, 1);
}

.BaseSelectProblem #baseList .active {
    background-color: rgba(166, 104, 248, 1);
}

.BaseSelectProblem #baseList .nonActive{
    background-color: rgba(166, 104, 248, 0.534);
}
==============================================
