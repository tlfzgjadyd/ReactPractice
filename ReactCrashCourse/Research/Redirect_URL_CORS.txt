<CORS>

API 연동하는 도중 나온 개념이 있어서 공부해본다
==================================
<CORS의 개념>

CORS (Cross Origin Resource Sharing) : 도메인 또는 포트가 다른 서버의 자원을 요청하는 메커니즘

동일 출처 정책(same-origin policy) : 불러온 문서나 스크립트가 다른 출처에서 가져온 리소스와 상호작용하는 것을 제한하는 보안 방식
                                              이것은 잠재적 악성 문서를 격리하여, 공격 경로를 감소시킨다

동일 출처 정책으로 인해 CORS 상황 발생시
보안을 위해 외부 서버에서 요청한 데이터를 브라우저가 차단함
그럼 정상적인 데이터를 못받고 콘솔창에 에러가 뜨게된다

실제 예시 : 리액트는 3000번 포트에서, 서버는 8000번 포트에서 실행시 포트가 달라 CORS 발생
===================================
<CORS 에러가 발생하는 경우 실전 해결법>

API 인증키 받는거 등록 안했을 경우에도 뜬다
CORS는 인증된 사람에게만 보여준다는 의미도 있음
단순히 실행포트 다르다고 나오는건 아닌것같음!
그래서 네이버 지도에서 사용한다고 등록을 하는것으로 이를 해결할 수 있었다
아래에 있는 미들웨어 등록해서 해결하는 방식은..이런경우엔 굳이 필요없다함!
그래서 설치했던 cors를 yarn remove cors로 다시 지워주었다
===================================
<해결법 : 이론>

서버와 클라이언트가 같은 도메인 사용하여 해결 가능하지만 
리액트처럼 spa 방식을 사용하여 개발하는 경우 서버에서 cross-origin http를 허가하여 해결하며
서버와 클라이언트가 분리돼 있는 앱에서는 cross-origin http 요청을 서버에서 승인해주는 것이 좋다

SPA(Single Page Application) : 최초 한번 페이지 전체를 로딩한 이후 부터는 데이터만 변경하여 사용할 수 있는 웹 애플리케이션
 			   리액트에선 react-router을 통해 spa를 구현한다
========================================
<해결법 : 실전>
1. Access-Control-Allow-Origin response 헤더 추가
   : 모든 클라이언트 요청때마다 cross-origin http 허가해주는 header 추가해주는 방식
     단점은 번거롭다는점 

	코드 예시)
	----------------------------------------------------
  	app.get('/data', (req, res) => {
  	  res.header("Access-Control-Allow-Origin", "*");  
 	   res.send(data);
	});
	----------------------------------------------------

2. node.js의 미들웨어 CORS 추가
   : cors라는 확장팩을 추가하여 해결하는 방식
     이 방식이 더 간단하다 그러나 이방식은 모든 요청을
     허가해버리기 때문에 보안적으로 취약해서 
     허락할 요청주소를 따로 지정해주는 작업이 필요하다
	
	설치 예시)
	----------------------------------------------------
	npm install --save cors
	yarn add cors
	----------------------------------------------------

	모든 요청 허가 코드)
	----------------------------------------------------
	const express = require('express');
	const cors = require('cors');

	const app = express();

	app.use(cors()); // CORS 미들웨어 추가
	----------------------------------------------------
 
            허가할 주소 지정 코드)
	----------------------------------------------------
	const corsOptions = {
   	 origin: 'http://localhost:3000', // 허락하고자 하는 요청 주소
 	   credentials: true, // true로 하면 설정한 내용을 response 헤더에 추가 해줍니다.
	};

	app.use(cors(corsOptions)); // config 추가
	----------------------------------------------------
========================================
참고 : https://velog.io/@wlsdud2194/cors
