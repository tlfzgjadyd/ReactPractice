<json의 정체는 정확히 무엇인가>
여태까지 json은 데이터 양식이란것 정도로 알고 있었다
이번 연구를 통해 json의 정체가 정확히 무엇인지를 알아내도록 한다
=========================
<데이터 표현 양식>
1. xml
2. json
=========================
<xml 데이터 양식>
XML은 HTML과 매우 비슷한 문자 기반의 마크업 언어이다
그러나 xml은 html과 달리 보여주기 위한 양식이 아닌
데이터 저장, 전달만을 목적으로 가진다
xml태그는 html태그와 달리 미리 정의되어있지 않으며 사용자가 직접 정의할 수 있다
=========================
<json 데이터 양식>
http://tcpschool.com/json/intro
JSON은 좀 더 쉽게 데이터를 교환하고 저장하기 위하여 만들어진 데이터 교환 표준 양식이다
사람과 기계 둘다 읽기 쉽게 텍스트 기반으로 작동하며
주로 { 중괄호 }와 ,구분 쉼표를 사용한다

json은 xml과 달리 배열을 사용할 수 있고 xml구분보다 짧고 빠르다
또한 파싱될떄 xml은 xml파서로 파싱되지만 json은 js 표준함수인 eval()로 파싱된다
=========================
<json이 더 빠른 이유>
xml은 xml dom을 사용해 문서에 접근하지만
json은 받은 즉시 문자열을 파싱하기에 더 빠르다
그러나 전송받은 데이터의 무결성을 사용자가 직접 검증해야 한다는 단점이 있다

따라서 빠른 응답이 필요한 곳에는 json을,
데이터의 검증이 필요한 곳에서는 xml을 많이 사용한다
=========================
<json의 주석>
json은 다른 언어와의 연동을 위해 주석을 사용하지 않을것을
권장하며 굳이 써야한다면 연동 전에 지울 것을 권장한다
=========================
<json의 정체>
json은 구조체같은 느낌으로
여러가지 정보를 한군데에 묶어 보내는 느낌의 데이터 형식이다
여러 종류의 데이터들을 한데 묶어 보내는
데이터 패킷같은 느낌이었다

키-값 쌍으로 표현하며
숫자는 그냥,
문자열은 " "로 묶어서
배열은 [ 대괄호 ]로 묶어서
객체는 { 중괄호 }로 묶어서 사용한다
 {
    "이름": "person1",
    "나이": 15,
}
 {
    "이름": "person2",
    "나이": 24,
}
 {
    "이름": "person3",
    "나이": 30,
}

이런식으로 여러 중괄호들을 하나의 json파일 안에 작성한다

이 데이터들에 실제로 접근할땐 key로 접근하여
value값을 얻어낼 수 있다
즉 json파일 안에 작성되는 여러가지 정보들은
실제 한명한명의 정보에 해당하는것으로 보인다
=====================
<실습>
https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/JSON
다음의 순서를 따라가보면 제이슨의 사용 순서는 다음과 같다
1. var requestURL="~"로 json의 url 가져오기
2. var request = new XMLHttpRequest();로 request 요청객체 만들기
3. request.open('GET', requestURL);로 새로운 요청 만들기
 ->여기서 첫번째 전달인자는 http 메소드로 요청 타입을 나타내며
    두번째 전달인자는 url 보낼곳을 지정하는 것이다
    여기선 json파일의 url을 써서 데이터를 json파일로 보냈다
4.request.responseType='json' 으로 지정
5.request.send(); 실제로 보내기
6. request.onload =function(){
    var res=request.response;
    name(res);
    age(res);
   를 통해 제이슨 설정

이때 운이 나쁘게도 다른타입으로 온 데이터를 json으로
변환해서 응답해야하거나 할 경우 parse함수를 적절하게 사용하곤 한다
===============================
<json 스키마>
json은 전송받은 측에서 형식에 맞는 데이터인지 확인할 필요성이 있다
그래서 json 데이터의 올바른 형식을 기술한 문서를 사용하며
이것을 json 스키마라고 부른다

JSON 스키마는 다음과 같은 세 가지 검증 과정을 거칩니다.

1. 데이터의 타입이 정확한가?

2. 필수로 받아와야 하는 데이터가 포함되어 있는가?

3. 데이터가 원하는 범위 안에 있는가?

이것들은 모두 검증 키워드를 통해 확인할 수 있다
대표적인 검증 키워드들은 다음과 같다
type	유효한 데이터의 타입을 명시함.
properties	유효한 데이터 이름과 값의 쌍들을 명시함.
required	명시한 배열의 모든 요소를 프로퍼티로 가지고 있어야만 유효함.
minimum	최솟값 이상의 숫자만 유효함.
maximum	최댓값 이하의 숫자만 유효함.
multipleOf	명시한 숫자의 배수만 유효함.
maxLength	명시한 최대 길이 이하의 문자열만 유효함.
minLength	명시한 최소 길이 이상의 문자열만 유효함.
pattern	명시한 정규 표현식에 해당하는 문자열만 유효함.
========================
<자바 스크립트에서 알아둬야할 json함수 3가지>

1. JSON.stringify() :로 전달받은 자바스크립트 객체를 문자열로 변환하여 반환

2. JSON.parse() : stringify() 메소드와는 반대로 인수로 전달받은 문자열을 자바스크립트 객체로 변환하여 반환

3. toJSON() :자바스크립트의 Date 객체의 데이터를 JSON 형식의 문자열로 변환하여 반환
	    따라서 이 메소드는 Date.prototype 객체에서만 사용할 수 있다
