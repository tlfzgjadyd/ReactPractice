<시작동기>

기존 html, css, js를 리액트로 옮기는 과정에서 js를 옮길때 문제가 발생
return문 안에 놔도 밖에 놔도 항상 에러나서 찾아봤더니 render()을 사용해야했다
그러나 강의를 더 듣기에는 지금은 귀찮음
그러므로 어떤식으로 js를 합치면 좋을지 연구해보도록 한다
=======================================
<React의 render이란 무엇인가?>

https://ko.reactjs.org/docs/rendering-elements.html
React 엘리먼트는 불변객체라 엘리먼트 생성 이후에는
해당 엘리먼트의 자식이나 속성을 변경할 수 없다
엘리먼트는 특정 시점의 UI만을 보여주기 때문에
UI를 업데이트하는 유일한 방법은 새로운 엘리먼트를 생성하고
 이를 ReactDOM.render()로 전달하는 것이다.

ex) ReactDOM.render(element, document.getElementById('root'));
이 코드를 보면 js에 들어가있었을 document.getElementById가
render함수안에 있으며, 첫번째 인자로 element를 주어
새로운 엘리먼트를 생성하고 있음을 알 수 있다

https://meetup.toast.com/posts/110
어떤 부분을 갱신하려면 많은 비용이 든다 (보통 UI제어비용은 비싸다)
따라서 리액트에서는 UI 제어를 최소화시켜
바뀐 부분만 업데이트 할 수 있도록 한것이다
실제로 O(n)의 시간복잡도를 가지더라도
렌더링해야하는 컴포넌트 수가 수천개가 될 경우 매우 느려진다
리액트는 트리 Reconcilation(재조정)시에 O(n)의 시간복잡도를 가지는데
필요 이상의 업데이트를 자제했기에 성능 고민을 안해도 된다는 장점이 있다
========================================
<엘리먼트 트리>

render을 사용하여 업데이트 하는것은 여러가지 방법이 있다
상황에 따라 기존 트리 제거 후 새로 만들거나, 바뀐 자식 노드만 바꾸는등

그러나 실전강의부터 들어가서 그런지 엘리먼트 트리가 무엇인지 조차
알지 못하는 상황이었고 링크에 따르면 리액트는 빠르지만
대충만들어도 빠른게 아니라 동작 원리를 이해하고 짜야 빠르다고 한다
실전강의를 통해 대강의 감을 잡았으니 이제 원리를 들어가도
좋을것같다는 생각이 들었다

기본가이드, 고급가이드 다있고 용어들이 생소한거 보니까
생각보다 관련 개념이 많았음
========================================
<+링크에서 본 render 응용법 메모>

초단위로 바뀌는 시계를 출력하려면 setInterval() 콜백함수를 통해
초마다 ReactDOM.render()를 호출

